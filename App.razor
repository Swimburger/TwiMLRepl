@inject CompileService compileService
<div class="row clearfix">
    <div class="column">
        <MonacoEditor
            Id="csharp-editor"
            ConstructionOptions="CsharpEditorConstructionOptions"
            OnDidChangeModelContent="OnCsharpChange"/>
    </div>
    <div class="column">
        <MonacoEditor Id="xml-editor" ConstructionOptions="XmlEditorConstructionOptions"/>
    </div>
</div>

@code{
    private MonacoEditor? csharpEditor;
    private MonacoEditor? xmlEditor;

    private StandaloneEditorConstructionOptions CsharpEditorConstructionOptions(MonacoEditor editor)
    {
        csharpEditor = editor;
        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Minimap = new EditorMinimapOptions()
            {
                Enabled = false
            },
            Value = "var response = new MessagingResponse();\n" +
                    "response.Message(\"Hello from C#!\");\n" +
                    "return response;"
        };
        compileService.CompileAndRun(options.Value);
        return options;
    }

    private StandaloneEditorConstructionOptions XmlEditorConstructionOptions(MonacoEditor editor)
    {
        xmlEditor = editor;
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "xml",
            ReadOnly = true,
            Minimap = new EditorMinimapOptions()
            {
                Enabled = false
            },
            Value = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                    "<Response>\n" +
                    "  <Message>Hello from C#!</Message>\n" +
                    "</Response>"
        };
    }

    private Task OnCsharpChange(ModelContentChangedEvent evt) => RunCsharp();

    private async Task RunCsharp()
    {
        var csCode = await csharpEditor.GetValue();
        csCode = "using System;" +
                 "using Twilio.TwiML; " +
                 "public class Program { " +
                 "  public string GetString() => GetTwiML().ToString(); " +
                 "  public TwiML GetTwiML(){" + csCode + "}" +
                 "}";

        var result = await compileService.CompileAndRun(csCode);
        if (string.IsNullOrEmpty(result))
        {
            await xmlEditor.SetValue(string.Join("\r\n", compileService.CompileLog));
        }
        else
        {
            await xmlEditor.SetValue(result);
        }
    }

}